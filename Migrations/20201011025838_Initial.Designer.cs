// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TextbookFinder.Models;

namespace TextbookFinder.Migrations
{
    [DbContext(typeof(TextbooksDBContext))]
    [Migration("20201011025838_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TextbookFinder.Models.Authors", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Author_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("First_name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnName("Last_name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("TextbookFinder.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("TextbookFinder.Models.TextbookAuthors", b =>
                {
                    b.Property<int>("TextbookId")
                        .HasColumnName("Textbook_id")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnName("Author_id")
                        .HasColumnType("int");

                    b.HasKey("TextbookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Textbook_Authors");
                });

            modelBuilder.Entity("TextbookFinder.Models.TextbookCategories", b =>
                {
                    b.Property<int>("TextbookId")
                        .HasColumnName("Textbook_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("Category_id")
                        .HasColumnType("int");

                    b.HasKey("TextbookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Textbook_Categories");
                });

            modelBuilder.Entity("TextbookFinder.Models.TextbookPublishers", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Publisher_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnName("Publisher_name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PublisherWebsite")
                        .HasColumnName("Publisher_website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Textbook_Publishers");
                });

            modelBuilder.Entity("TextbookFinder.Models.Textbooks", b =>
                {
                    b.Property<int>("TextbookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Textbook_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("Category_id")
                        .HasColumnType("int");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Isbn")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnName("Published_date")
                        .HasColumnType("date");

                    b.Property<int?>("PublisherId")
                        .HasColumnName("Publisher_id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("TextbookId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Textbooks");
                });

            modelBuilder.Entity("TextbookFinder.Models.TextbookAuthors", b =>
                {
                    b.HasOne("TextbookFinder.Models.Authors", "Author")
                        .WithMany("TextbookAuthors")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Author_id")
                        .IsRequired();

                    b.HasOne("TextbookFinder.Models.Textbooks", "Textbook")
                        .WithMany("TextbookAuthors")
                        .HasForeignKey("TextbookId")
                        .HasConstraintName("FK_Texbooks")
                        .IsRequired();
                });

            modelBuilder.Entity("TextbookFinder.Models.TextbookCategories", b =>
                {
                    b.HasOne("TextbookFinder.Models.Category", "Category")
                        .WithMany("TextbookCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Categories")
                        .IsRequired();

                    b.HasOne("TextbookFinder.Models.Textbooks", "Textbook")
                        .WithMany("TextbookCategories")
                        .HasForeignKey("TextbookId")
                        .HasConstraintName("FK_Texbooks_Categories")
                        .IsRequired();
                });

            modelBuilder.Entity("TextbookFinder.Models.Textbooks", b =>
                {
                    b.HasOne("TextbookFinder.Models.Category", "Category")
                        .WithMany("Textbooks")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Category");

                    b.HasOne("TextbookFinder.Models.TextbookPublishers", "Publisher")
                        .WithMany("Textbooks")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("FK_Texbook_Publisher");
                });
#pragma warning restore 612, 618
        }
    }
}
